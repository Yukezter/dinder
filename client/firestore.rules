rules_version = "2";
service cloud.firestore {
  match /databases/{database}/documents {
    function isAuthenticated() {
      return request.auth.uid != null; 
    }

    function hasAccess() {
      return request.auth.token.accessLevel == 1;
    }

    function ownsResource(userId) {
      return request.auth.uid == userId;
    }

    function hasOnlyKeys(fields) {
      return request.resource.data.keys().hasOnly(fields)
    }
    
    // function doesntModifyFields(fields) {
    //   return request.resource.data.keys().hasAny(fields) == false;
    // }

    match /status/{userId} {
      allow read: if isAuthenticated();
      allow create, update: if ownsResource(userId)
        && hasOnlyKeys(['state'])
        && request.resource.data.state == 'online';
    }

    match /usernames/{username} {
      allow read: if isAuthenticated();
    }

    match /users/{userId} {
      allow read: if isAuthenticated();

      match /businesses/{yelpId} {
        allow read, delete: if ownsResource(userId);
        allow create, update: if hasAccess() && ownsResource(userId) &&
          request.resource.data.keys().hasOnly(['type', 'id', 'details']) &&
          (request.resource.data.type == 'save' || request.resource.data.type == 'block') &&
          request.resource.data.id is string &&
          request.resource.data.details.image is string &&
          request.resource.data.details.name is string &&
          (request.resource.data.details.rating is int || request.resource.data.details.rating is float) && 
          request.resource.data.details.price is string &&
          request.resource.data.details.categories is string &&
          request.resource.data.details.location is string &&
          request.resource.data.details.reviews is int &&
          request.resource.data.details.url is string;
      }
    }

    match /contacts/{userId} {
      allow read: if isAuthenticated();
      // allow write: if hasAccess() && ownsResource(userId);
      // allow create, update: if hasAccess()
      //   && ownsResource(userId)
      //   || (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['requests']))
    }

    match /parties/{partyId} {
      allow read: if isAuthenticated();

      match /swipes/{yelpId} {
        allow read: if hasAccess();
        allow create: if hasAccess() &&
          request.auth.uid in get(/databases/$(database)/documents/parties/$(partyId)).data.members &&
          request.resource.data.keys().hasOnly([request.auth.uid]) &&
          request.resource.data[request.auth.uid].action == 'dislike' ||
          request.resource.data[request.auth.uid].action == 'super-like' ||
          request.resource.data[request.auth.uid].action == 'like' &&
          request.resource.data[request.auth.uid].timestamp is timestamp;
        allow update: if hasAccess() &&
          request.auth.uid in get(/databases/$(database)/documents/parties/$(partyId)).data.members &&
          request.resource.data.diff(resource.data).affectedKeys().hasOnly([request.auth.uid]) &&
          request.resource.data[request.auth.uid].action == 'dislike' ||
          request.resource.data[request.auth.uid].action == 'super-like' ||
          request.resource.data[request.auth.uid].action == 'like' &&
          request.resource.data[request.auth.uid].timestamp is timestamp;
      }

      match /matches/{yelpId} {
        allow read: if hasAccess();
      }
    }

    match /offsets/{partyId} {
      allow read: if hasAccess();
      allow create: if hasAccess() &&
        request.resource.data.keys().hasOnly([request.auth.uid]) &&
        request.resource.data[request.auth.uid] is int &&
        request.resource.data[request.auth.uid] >= 0 &&
        request.resource.data[request.auth.uid] < 1000;
      allow update: if hasAccess() &&
        request.resource.data.diff(resource.data).affectedKeys().hasOnly([request.auth.uid]) &&
        request.resource.data[request.auth.uid] is int &&
        request.resource.data[request.auth.uid] >= 0 &&
        request.resource.data[request.auth.uid] < 1000;
    }
  }
}